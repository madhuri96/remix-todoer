{
  "version": 3,
  "sources": ["../../../app/routes/todo.jsx", "../../../app/components/Pagination.jsx", "../../../app/components/Category.jsx", "../../../app/components/Subtask.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/todo.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/todo.jsx\");\n}\n// REMIX HMR END\n\nimport { Link, Outlet, useLoaderData, useNavigate } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\";\nimport { db } from \"~/utils/db.server\";\nimport { useState } from \"react\";\nimport styleUrl from '~/styles/todo.css';\nimport Pagination from '../components/Pagination';\nimport bookmark from '../styles/bookmark.png';\nimport todolist from '../styles/checklist.png';\nimport { getUser } from \"~/utils/session.server\";\nimport CategoryForm from '../components/Category';\nimport Subtask from '../components/Subtask';\nexport const links = () => [{\n  rel: \"stylesheet\",\n  href: styleUrl\n}];\nexport const loader = async ({\n  request\n}) => {\n  const todoListItems = await db.todo.findMany({\n    include: {\n      subtask: true,\n      category: true\n    }\n  });\n  const todoListWithSelected = await Promise.all(todoListItems.map(async todo => {\n    const subtasks = await db.subtask.findMany({\n      where: {\n        todoId: todo.id\n      }\n    });\n    return {\n      ...todo,\n      subtask: subtasks,\n      selected: false\n    };\n  }));\n  const user = await getUser(request);\n  const categories = await db.category.findMany();\n  const subtasks = await db.subtask.findMany();\n  return json({\n    todoListItems: todoListWithSelected,\n    user,\n    categories,\n    subtasks\n  });\n};\nexport const action = async ({\n  request\n}) => {\n  const form = await request.formData();\n  const description = form.get(\"description\");\n  const title = form.get(\"title\");\n  const status = form.get(\"status\");\n  if (typeof description !== \"string\" || typeof title !== \"string\") {\n    throw new Error(\"Form not submitted correctly.\");\n  }\n\n  // Retrieve the user from the session or authentication data\n  const user = await getUser(request);\n\n  // Check if the user is logged in\n  if (!user) {\n    throw new Error(\"User not authenticated.\");\n  }\n  const selectedCategoryId = form.get(\"category\");\n  if (!selectedCategoryId) {\n    throw new Error(\"Selected category ID cannot be null or empty.\");\n  }\n  const fields = {\n    description,\n    title,\n    status,\n    todos: {\n      connect: {\n        id: user.id\n      }\n    },\n    // Connect the Todo to the user\n    category: {\n      connect: {\n        id: selectedCategoryId\n      }\n    }\n  };\n  const todo = await db.todo.create({\n    data: fields\n  });\n  return todo;\n};\nexport default function TodoRoute() {\n  _s();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [todoList, setTodoList] = useState(useLoaderData().todoListItems);\n  const [filterValue, setFilterValue] = useState(\"all\");\n  const navigate = useNavigate();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [todosPerPage, setTodosPerPage] = useState(10);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showFavoritesOnly, setShowFavoritesOnly] = useState(false);\n  const [selectedCategoryId, setSelectedCategoryId] = useState(\"\");\n  const [isCategoryFormOpen, setIsCategoryFormOpen] = useState(false);\n  // const [category, setCategory] = useState([]);\n  // const categories = data.categories;\n  const [categories, setCategories] = useState(useLoaderData().categories);\n  const data = useLoaderData();\n  const [isSubtaskPanelOpen, setIsSubtaskPanelOpen] = useState(false);\n  const [selectedTodoId, setSelectedTodoId] = useState(\"\");\n  const [subtaskTitle, setSubtaskTitle] = useState(\"\");\n  const [subtaskStatus, setSubtaskStatus] = useState(\"in-progress\");\n  const selectedTodo = todoList.find(todo => todo.id === selectedTodoId);\n  //const [subtasks, setSubtasks] = useState(selectedTodo ? selectedTodo.subtask : []);\n  const [subtasks, setSubtasks] = useState(useLoaderData().subtasks);\n  const toggleForm = () => {\n    setIsFormOpen(!isFormOpen);\n  };\n  const closeForm = () => {\n    setIsFormOpen(false);\n  };\n  const handleCategoryCreate = async categoryName => {\n    console.log('Received category:', categoryName); // Add this line\n\n    try {\n      if (!categoryName) {\n        throw new Error(\"Invalid category data.\");\n      }\n      const newCategory = await db.category.create({\n        data: {\n          category: categoryName\n        }\n      });\n\n      // Fetch the updated list of categories from the database\n      const updatedCategories = await db.category.findMany();\n\n      // Update the state to include the new category and updated categories list\n      setCategories(updatedCategories);\n      setSelectedCategoryId(newCategory.id); // Optionally, select the newly created category\n    } catch (error) {\n      console.error('Error creating category:', error);\n    }\n  };\n  const handleStatusChange = (id, newStatus) => {\n    const updatedTodoList = todoList.map(todo => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          status: newStatus\n        };\n      }\n      return todo;\n    });\n    setTodoList(updatedTodoList);\n  };\n  const handleDelete = async id => {\n    const updatedTodoList = todoList.filter(todo => todo.id !== id);\n    setTodoList(updatedTodoList);\n    try {\n      await fetch(`/todo/${id}`, {\n        method: \"DELETE\"\n      });\n    } catch (error) {\n      console.error(\"Error deleting todo:\", error);\n    }\n  };\n  const filteredTodoList = filterValue === \"all\" ? todoList : todoList.filter(todo => todo.status === filterValue);\n  console.log(\"Filtered Todo List:\", filteredTodoList);\n  const handleSearch = () => {\n    const filteredTodoList = filterValue === \"all\" ? todoList : todoList.filter(todo => todo.status === filterValue);\n    const searchedTodoList = filteredTodoList.filter(todo => todo.title.toLowerCase().includes(searchTerm.toLowerCase()));\n    return searchedTodoList;\n  };\n  const searchedTodoList = handleSearch();\n\n  //  // Calculate index of the first and last todos for the current page\n  //  const indexOfLastTodo = currentPage * todosPerPage;\n  //  const indexOfFirstTodo = indexOfLastTodo - todosPerPage;\n\n  //    // Get the todos for the current page\n  //  const currentTodos = filteredTodoList.slice(indexOfFirstTodo, indexOfLastTodo);\n\n  // Calculate index of the first and last todos for the current page\n  const indexOfLastTodo = currentPage * todosPerPage;\n  const indexOfFirstTodo = indexOfLastTodo - todosPerPage;\n\n  // Get the todos for the current page\n  const currentTodos = searchedTodoList.slice(indexOfFirstTodo, indexOfLastTodo);\n  const handleFavoriteToggle = id => {\n    const updatedTodoList = todoList.map(todo => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          isFavorite: !todo.isFavorite\n        };\n      }\n      return todo;\n    });\n    setTodoList(updatedTodoList);\n  };\n  const favoritedTodoList = todoList.filter(todo => todo.isFavorite);\n  const openSubtaskPanel = todoId => {\n    setSelectedTodoId(todoId);\n    setIsSubtaskPanelOpen(true);\n  };\n  const handleSubtaskCreate = async newSubtask => {\n    if (!selectedTodoId || newSubtask.title.trim() === \"\") {\n      return; // Don't add an empty subtask or if no todo is selected\n    }\n\n    // newSubtask = {\n    //   title: subtaskTitle,\n    //   status: subtaskStatus,\n    // };\n\n    const updatedSubtasks = [...subtasks, newSubtask]; // Add the new subtask\n    setSubtasks(updatedSubtasks); // Update the subtasks state\n\n    const updatedTodoList = todoList.map(todo => {\n      if (todo.id === selectedTodoId) {\n        // Update the selected todo's subtasks with the new subtask\n        return {\n          ...todo,\n          subtask: updatedSubtasks\n        };\n      }\n      return todo;\n    });\n    setTodoList(updatedTodoList);\n    setIsSubtaskPanelOpen(false);\n    setSubtaskTitle(\"\");\n    setSubtaskStatus(\"in-progress\");\n  };\n  const handleSubtaskDelete = subtaskId => {\n    const updatedSubtasks = subtasks.filter(subtask => subtask.id !== subtaskId);\n    setSubtasks(updatedSubtasks);\n\n    // You might also want to update the subtasks for the selected todo\n    const updatedTodoList = todoList.map(todo => {\n      if (todo.id === selectedTodoId) {\n        return {\n          ...todo,\n          subtask: updatedSubtasks\n        };\n      }\n      return todo;\n    });\n    setTodoList(updatedTodoList);\n  };\n  function getStatusColor(status) {\n    if (status === \"in-progress\") {\n      return \"rgb(245, 245, 245)\";\n    } else if (status === \"completed\") {\n      return \"rgba(144, 238, 144, 0.849)\";\n    } else if (status === \"on-hold\") {\n      return \"rgba(255, 166, 0, 0.623)\";\n    } else {\n      return \"\";\n    }\n  }\n  return <div style={{\n    fontFamily: \"system-ui, sans-serif\",\n    lineHeight: \"1.8\"\n  }}>  \n            <header>\n\n            <h1><img src={todolist} alt=\"\" style={{\n          height: \"50px\"\n        }} />TODOER</h1>\n\n            {data.user ? <div className=\"user-info\">\n              <span style={{\n          fontSize: \"30px\"\n        }}>{`Hi ${data.user.username}`}</span>\n              <form action=\"/logout\" method=\"post\">\n                <button type=\"submit\" className=\"button\" style={{\n            marginLeft: \"10px\"\n          }}>\n                  Logout\n                </button>\n              </form>\n            </div> : <Link to=\"/login\">Login</Link>}\n\n            </header>\n            <main>\n             <div style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\"\n      }}>\n                <div>\n                  <h3>What do you want to do Today?</h3>\n                  <div className=\"button-container\">\n                  <button type=\"button\" id=\"addtodo\" className=\"button1\" onClick={toggleForm}>\n                       Add Todo\n                  </button>\n\n                  <div>\n                  <button type=\"button\" className=\"button1\" onClick={() => setIsCategoryFormOpen(true)}>\n\n                    Add Category\n                   </button>\n               \n                   {isCategoryFormOpen && <div className=\"popup\">\n                   {categories && <CategoryForm onSave={handleCategoryCreate} onCancel={() => setIsCategoryFormOpen(false)} categories={categories} />}\n\n\n                  </div>}\n\n                 </div>\n                 </div>\n\n\n                  \n                  {isFormOpen && <div className=\"popup\">\n                  <form method=\"post\">\n                  <div>\n                   <label>\n                     Title\n                   <input type=\"text\" name=\"title\" className=\"input-field\" />\n\n                 </label>\n                 </div>\n                <div>\n                <label>\n                Description\n               <textarea name=\"description\" className=\"textarea-field\" />\n\n            </label>\n          </div>\n          <div>\n          <label>\n           Status\n          <select name=\"status\" className=\"select-field\">\n\n            <option value=\"in-progress\">In Progress</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"on-hold\">On Hold</option>\n          </select>\n         </label>\n         </div>\n         <div>\n         <label>\n           Category\n           {categories && <select name=\"category\" value={selectedCategoryId} onChange={e => setSelectedCategoryId(e.target.value)} className=\"select-field\">\n\n            <option value=\"\">Select Category</option>\n            {categories.map(category => <option key={category.id} value={category.id}>\n             {category.category}\n            </option>)}\n          </select>}\n\n          </label>\n          </div>\n          <div className=\"button-group\">\n          <button type=\"submit\" className=\"button\">\n            Add\n          </button>\n          <button class=\"button button-cancel\" onClick={closeForm}>\n          Cancel\n          </button>\n          </div>\n\n          </form>\n          </div>}\n\n\n\n            {selectedTodoId && isSubtaskPanelOpen && <div className=\"popup\">\n    <form>\n      <Subtask selectedTodoId={selectedTodoId} subtasks={subtasks} onSaveSubtask={handleSubtaskCreate} onDeleteSubtask={handleSubtaskDelete} />\n\n\n      <div>\n        <button type=\"button\" onClick={() => {\n                  setIsSubtaskPanelOpen(false);\n                  setSubtaskTitle(\"\");\n                  setSubtaskStatus(\"in-progress\");\n                }} className=\"button\">\n\n          Cancel\n        </button>\n      </div>\n    </form>\n  </div>}\n\n\n\n\n                </div>\n                \n\n               <div className=\"search-container\">\n                  <input type=\"text\" className=\"search-input\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} onKeyPress={e => {\n            if (e.key === \"Enter\") {\n              e.preventDefault();\n              const filteredTodos = handleSearch();\n              const currentSearchedTodos = filteredTodos.slice(indexOfFirstTodo, indexOfLastTodo);\n              setTodoList(currentSearchedTodos);\n            }\n          }} placeholder=\"Search todos...\" />\n\n\n              <button className=\"button search-button\" onClick={() => {\n            const filteredTodos = handleSearch();\n            const currentSearchedTodos = filteredTodos.slice(indexOfFirstTodo, indexOfLastTodo);\n            setTodoList(currentSearchedTodos);\n          }}>\n\n                \uD83D\uDD0D\n               </button>\n              </div>\n\n               <div style={{\n          display: \"flex\",\n          justifyContent: \"initial\"\n        }}>\n                <div>\n                <input type=\"checkbox\" onChange={e => {\n              const selectAll = e.target.checked;\n              const updatedTodoList = todoList.map(todo => ({\n                ...todo,\n                selected: selectAll\n              }));\n              setTodoList(updatedTodoList);\n            }} />\n\n                <select value={filterValue} onChange={e => setFilterValue(e.target.value)}>\n\n                <option value=\"all\">All</option>\n                <option value=\"in-progress\">In Progress</option>\n                <option value=\"completed\">Completed</option>\n                <option value=\"on-hold\">On Hold</option>\n                </select>\n                </div>\n\n                <div className=\"bookmark-icon-container\">\n                 <span className={`bookmark-icon ${showFavoritesOnly ? \"active\" : \"\"}`} onClick={() => setShowFavoritesOnly(!showFavoritesOnly)}>\n\n                <img src={bookmark} alt=\"\" style={{\n                height: \"40px\"\n              }} />\n                 </span>\n                </div>\n                </div>\n\n\n                <div>\n                <ul>\n                  {/* {todoList.map(({ id, title,status,selected}) => ( */}\n                  {/* {filteredTodoList.map(({ id, title, status, selected }) => ( */}\n                  {showFavoritesOnly ? favoritedTodoList.map(({\n              id,\n              title,\n              status,\n              selected,\n              isFavorite\n            }) => <li key={id}>\n\n                    <span>\n\n                      <span className=\"add-icon\" onClick={() => openSubtaskPanel(id)}>\n\n                       \u2795 \n                      </span>\n\n                     <input type=\"checkbox\" checked={selected} onChange={() => {\n                  const updatedTodoList = todoList.map(todo => {\n                    if (todo.id === id) {\n                      return {\n                        ...todo,\n                        selected: !selected\n                      };\n                    }\n                    return todo;\n                  });\n                  setTodoList(updatedTodoList);\n                }} />\n\n                    {/* <Link to={id}>{title}</Link> */}\n                    <Link to={id} style={{\n                  backgroundColor: getStatusColor(status),\n                  padding: \"2px 5px\",\n                  textDecoration: \"none\"\n                }}>\n\n                   {title}\n                    </Link>\n                    \n              </span>\n\n               <span style={{\n                display: \"table\"\n              }}>\n               <span style={{\n                  display: \"table-row\"\n                }}>\n               <span className={`status ${status}`} style={{\n                    display: \"table-cell\",\n                    marginRight: \"10px\"\n                  }}>\n               <select name=\"status\" value={status} onChange={e => handleStatusChange(id, e.target.value)}>\n\n               <option value=\"in-progress\">In Progress</option>\n               <option value=\"completed\">Completed</option>\n               <option value=\"on-hold\">On Hold</option>\n               </select>\n               </span>\n               <span style={{\n                    display: \"table-cell\"\n                  }}>\n               <button className=\"button\" onClick={() => {\n                      navigate(`/edit-todo/${id}`);\n                    }} style={{\n                      backgroundColor: \"lightblue\",\n                      marginLeft: \"2px\"\n                    }}>\n\n               Edit\n              </button>\n              <button className=\"button\" onClick={() => {\n                      if (window.confirm(\"Are you sure you want to delete this todo?\")) {\n                        handleDelete(id);\n                      }\n                    }} style={{\n                      backgroundColor: \"lightcoral\",\n                      marginLeft: \"2px\"\n                    }}>\n\n                Delete\n              </button>\n              <span className={`favorite-icon ${isFavorite ? \"active\" : \"\"}`} onClick={() => handleFavoriteToggle(id)} style={{\n                      marginLeft: \"2px\"\n                    }}>\n\n               {isFavorite ? \"\u2764\uFE0F\" : \"\uD83D\uDDA4\"}\n              </span>\n             </span>\n             </span>\n            </span>\n \n        </li>) : currentTodos.map(({\n              id,\n              title,\n              status,\n              selected,\n              isFavorite\n            }) => <li key={id}>\n                    <span>\n                     <span className=\"add-icon\" onClick={() => openSubtaskPanel(id)}>\n\n                       \u2795 \n                      </span>\n\n                    <input type=\"checkbox\" checked={selected} onChange={() => {\n                  const updatedTodoList = todoList.map(todo => {\n                    if (todo.id === id) {\n                      return {\n                        ...todo,\n                        selected: !selected\n                      };\n                    }\n                    return todo;\n                  });\n                  setTodoList(updatedTodoList);\n                }} />\n\n                    <Link to={id} style={{\n                  backgroundColor: getStatusColor(status),\n                  padding: \"2px 5px\",\n                  textDecoration: \"none\"\n                }}>\n\n                   {title}\n                    </Link>\n                </span>\n                \n                <span style={{\n                display: \"table\"\n              }}>\n               <span style={{\n                  display: \"table-row\"\n                }}>\n               <span className={`status ${status}`} style={{\n                    display: \"table-cell\",\n                    marginRight: \"10px\"\n                  }}>\n               <select name=\"status\" value={status} onChange={e => handleStatusChange(id, e.target.value)}>\n\n               <option value=\"in-progress\">In Progress</option>\n               <option value=\"completed\">Completed</option>\n               <option value=\"on-hold\">On Hold</option>\n               </select>\n               </span>\n               <span style={{\n                    display: \"table-cell\"\n                  }}>\n               <button className=\"button\" onClick={() => {\n                      navigate(`/edit-todo/${id}`);\n                    }} style={{\n                      backgroundColor: \"lightblue\",\n                      marginLeft: \"2px\"\n                    }}>\n\n               Edit\n              </button>\n              <button className=\"button\" onClick={() => {\n                      if (window.confirm(\"Are you sure you want to delete this todo?\")) {\n                        handleDelete(id);\n                      }\n                    }} style={{\n                      backgroundColor: \"lightcoral\",\n                      marginLeft: \"2px\"\n                    }}>\n\n                Delete\n              </button>\n              <span className={`favorite-icon ${isFavorite ? \"active\" : \"\"}`} onClick={() => handleFavoriteToggle(id)} style={{\n                      marginLeft: \"2px\"\n                    }}>\n\n               {isFavorite ? \"\u2764\uFE0F\" : \"\uD83D\uDDA4\"}\n              </span>\n             </span>\n             </span>\n            </span>\n \n           </li>)}\n      </ul>\n   </div>\n                <div>\n                   <Outlet />\n                </div>\n\n                </div>\n              \n                <Pagination currentPage={currentPage} todosPerPage={todosPerPage} totalTodos={searchedTodoList.length} //{filteredTodoList.length} \n      onPageChange={page => setCurrentPage(page)} onPerPageChange={event => setTodosPerPage(parseInt(event.target.value))} />\n\n            </main>\n        </div>;\n}\n_s(TodoRoute, \"VlsOK8VPx8NX+IBcevIkKkkSsxg=\", false, function () {\n  return [useLoaderData, useNavigate, useLoaderData, useLoaderData, useLoaderData];\n});\n_c = TodoRoute;\nvar _c;\n$RefreshReg$(_c, \"TodoRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/Pagination.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/Pagination.jsx\");\n  import.meta.hot.lastModified = \"1692335797790.096\";\n}\n// REMIX HMR END\n\nimport React from 'react';\nconst Pagination = ({\n  currentPage,\n  todosPerPage,\n  totalTodos,\n  onPageChange,\n  onPerPageChange\n}) => {\n  const totalPages = Math.ceil(totalTodos / todosPerPage);\n  const handlePageClick = page => {\n    onPageChange(page);\n  };\n  const handlePerPageSelect = event => {\n    onPerPageChange(event);\n  };\n  const handlePreviousPage = () => {\n    if (currentPage > 1) {\n      onPageChange(currentPage - 1);\n    }\n  };\n  const handleNextPage = () => {\n    if (currentPage < totalPages) {\n      onPageChange(currentPage + 1);\n    }\n  };\n  return <div style={{\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '20px'\n  }}>\n      <span>Records per page:</span>\n      <select value={todosPerPage} onChange={handlePerPageSelect} style={{\n      margin: '0 10px',\n      padding: '5px'\n    }}>\n        <option value='3'>3</option>\n        <option value='5'>5</option>\n        <option value='10'>10</option>\n        <option value='15'>15</option>\n      </select>\n      <button className='pagination-button' onClick={handlePreviousPage} disabled={currentPage === 1} style={{\n      backgroundColor: '#f0f0f0',\n      border: 'none',\n      padding: '5px 10px',\n      margin: '0 5px',\n      cursor: 'pointer',\n      opacity: currentPage === 1 ? 0.5 : 1\n    }}>\n        \u25C0\n      </button>\n      <ul className='pagination-list' style={{\n      listStyle: 'none',\n      display: 'flex',\n      margin: '0',\n      padding: '0'\n    }}>\n        {Array.from({\n        length: totalPages\n      }, (_, index) => index + 1).map(number => <li key={number} className={`pagination-item ${number === currentPage ? 'active' : ''}`} onClick={() => handlePageClick(number)} style={{\n        margin: '0 2px',\n        padding: '5px',\n        cursor: 'pointer',\n        border: '1px solid #ccc',\n        borderRadius: '3px',\n        fontWeight: number === currentPage ? 'bold' : 'normal',\n        backgroundColor: number === currentPage ? 'cyan' : 'transparent'\n      }}>\n              {number}\n            </li>)}\n      </ul>\n      <button className='pagination-button' onClick={handleNextPage} disabled={currentPage === totalPages} style={{\n      backgroundColor: '#f0f0f0',\n      border: 'none',\n      padding: '5px 10px',\n      margin: '0 5px',\n      cursor: 'pointer',\n      opacity: currentPage === totalPages ? 0.5 : 1\n    }}>\n        \u25B6\n      </button>\n    </div>;\n};\n_c = Pagination;\nexport default Pagination;\nvar _c;\n$RefreshReg$(_c, \"Pagination\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/Category.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/Category.jsx\");\n  import.meta.hot.lastModified = \"1692859696322.632\";\n}\n// REMIX HMR END\n\nimport React, { useState } from 'react';\nfunction CategoryForm({\n  onSave,\n  onCancel,\n  categories\n}) {\n  _s();\n  const [category, setCategory] = useState('');\n  const [editingCategoryId, setEditingCategoryId] = useState(null);\n  const [editedCategory, setEditedCategory] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!category) {\n      console.error('Category is empty.');\n      return;\n    }\n\n    //const newCategoryId = categories.length + 1; \n\n    //onSave({ id: newCategoryId, category: category });\n    console.log(category);\n    onSave(category);\n    setCategory('');\n  };\n  const handleEditCategory = categoryId => {\n    const categoryToEdit = categories.find(category => category.id === categoryId);\n    if (categoryToEdit) {\n      setEditingCategoryId(categoryId);\n      setEditedCategory(categoryToEdit.category);\n    }\n  };\n  const handleSaveEditedCategory = () => {\n    if (!editedCategory) {\n      console.error('Edited category is empty.');\n      return;\n    }\n    setEditingCategoryId(null);\n    setEditedCategory('');\n  };\n  const handleDeleteCategory = categoryId => {\n    deleteCategoryFromServer(categoryId).then(() => {\n      const updatedCategories = categories.filter(category => category.id !== categoryId);\n      setCategories(updatedCategories);\n    }).catch(error => {\n      console.error('Error deleting category:', error);\n    });\n  };\n  return <form onSubmit={handleSubmit}>\n      <div>\n        <label>\n          Category Name:\n          <input type=\"text\" value={category} onChange={e => setCategory(e.target.value)} />\n        </label>\n      </div>\n      <div>\n        <button type=\"submit\" className=\"button\">\n          ADD\n        </button>\n        <button className=\"button\" onClick={onCancel} style={{\n        backgroundColor: \"red\",\n        marginLeft: \"2px\"\n      }}>\n          Cancel\n        </button>\n      </div>\n      <div>\n        <ul>\n          {categories.map(category => <li key={category.id}>\n              {editingCategoryId === category.id ? <div>\n                  <input type=\"text\" value={editedCategory} onChange={e => setEditedCategory(e.target.value)} />\n                  <button onClick={handleSaveEditedCategory}>Save</button>\n                </div> : <div>\n                  {category.category}\n                  <button onClick={() => handleEditCategory(category.id)} style={{\n              marginLeft: \"8px\"\n            }}>\n                    Edit\n                  </button>\n                  <button onClick={() => handleDeleteCategory(category.id)} style={{\n              marginLeft: \"8px\",\n              color: \"red\"\n            }}>\n                    Delete\n                  </button>\n                </div>}\n            </li>)}\n        </ul>\n      </div>\n    </form>;\n}\n_s(CategoryForm, \"HjoX0fzjyOICyLjwEj5gbf64v1E=\");\n_c = CategoryForm;\nexport default CategoryForm;\nvar _c;\n$RefreshReg$(_c, \"CategoryForm\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/Subtask.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/Subtask.jsx\");\n  import.meta.hot.lastModified = \"1692859988302.256\";\n}\n// REMIX HMR END\n\nimport React, { useState } from \"react\";\nfunction Subtask({\n  subtasks,\n  onSaveSubtask,\n  onDeleteSubtask\n}) {\n  _s();\n  const [subtaskTitle, setSubtaskTitle] = useState(\"\");\n  const [subtaskStatus, setSubtaskStatus] = useState(\"in-progress\");\n  const handleSubtaskCreate = () => {\n    if (subtaskTitle.trim() === \"\") {\n      return;\n    }\n    const newSubtask = {\n      title: subtaskTitle,\n      status: subtaskStatus\n    };\n    onSaveSubtask(newSubtask);\n    setSubtaskTitle(\"\");\n    setSubtaskStatus(\"in-progress\");\n  };\n  const handleSubtaskDelete = subtaskId => {\n    onDeleteSubtask(subtaskId);\n  };\n  return <div>\n      <div>\n        <h3>Add Subtask</h3>\n        <label>\n          Title:\n          <input type=\"text\" value={subtaskTitle} onChange={e => setSubtaskTitle(e.target.value)} />\n        </label>\n        <label>\n          Status:\n          <select value={subtaskStatus} onChange={e => setSubtaskStatus(e.target.value)}>\n            <option value=\"in-progress\">In Progress</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"on-hold\">On Hold</option>\n          </select>\n        </label>\n        <button onClick={handleSubtaskCreate}>Add Subtask</button>\n      </div>\n      <div>\n        {subtasks && subtasks.length > 0 ? <ul>\n            {subtasks.map(subtask => <li key={subtask.id}>\n                {subtask.title}\n                <select value={subtask.status} onChange={e => setSubtaskStatus(e.target.value)}>\n                  <option value=\"in-progress\">In Progress</option>\n                  <option value=\"completed\">Completed</option>\n                  <option value=\"on-hold\">On Hold</option>\n                </select>\n                <button onClick={() => handleSubtaskDelete(subtask.id)}>\n                  Delete\n                </button>\n              </li>)}\n          </ul> : <p>No subtasks available.</p>}\n      </div>\n    </div>;\n}\n_s(Subtask, \"GxVNUIx0xhT979ZiswkMGJmUExo=\");\n_c = Subtask;\nexport default Subtask;\nvar _c;\n$RefreshReg$(_c, \"Subtask\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "category", "_c", "import_react", "import_jsx_dev_runtime", "_s", "_c", "import_jsx_dev_runtime", "_s", "_s", "setCategories", "filteredTodoList", "searchedTodoList", "_c"]
}
